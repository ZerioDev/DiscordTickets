const { createWriteStream } = require('fs');
const { MessageEmbed, MessageSelectMenu, MessageActionRow, MessageButton } = require('discord.js');

module.exports = async (client, int) => {
    const req = int.customId.split('_')[0];

    client.emit('ticketsLogs', req, int.guild, int.member.user);

    switch (req) {
        case 'createTicket': {
            const selectMenu = new MessageSelectMenu();

            selectMenu.setCustomId('newTicket');
            selectMenu.setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è —Ç–∏–∫–µ—Ç–∞');
            selectMenu.addOptions([
              {
                emoji: 'üí¨', //–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Å–≤–æ–π —ç–º–æ–¥–∑–∏ 
                label: '–°—É–¥', //–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–≤–∑–∞–Ω–∏–µ –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å newTicket_(–≤–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
                description: '–ü–æ–∑–≤–∞—Ç—å —Å—É–¥—å—é',  //–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏ 
                value: 'newTicket_–°—É–¥',
              },
              {
                emoji: 'üíÇ', //–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Å–≤–æ–π —ç–º–æ–¥–∑–∏ 
                label: '–ì–≤–∞—Ä–¥–∏—è', //–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–≤–∑–∞–Ω–∏–µ –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å newTicket_(–≤–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
                description: '–ü–æ–∑–≤–∞—Ç—å –≥–≤–∞—Ä–¥–∏—é',  //–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏ 
                value: 'newTicket_–ì–≤–∞—Ä–¥–∏—è',
              },
              {
                emoji: 'üÜò', //–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Å–≤–æ–π —ç–º–æ–¥–∑–∏ 
                label: '–ü–æ–º–æ—â—å', //–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–≤–∑–∞–Ω–∏–µ –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å newTicket_(–≤–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
                description: '–ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é',
                value: 'newTicket_–ü–æ–º–æ—â—å', //—á–∏—Ç–∞–π—Ç–µ (//) –≤ label 
              },
              {
                emoji: 'üí∞', //–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Å–≤–æ–π —ç–º–æ–¥–∑–∏ 
                label: '–ë–∞–Ω–∫', //–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–≤–∑–∞–Ω–∏–µ –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å newTicket_(–≤–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
                description: '–ü–æ–∑–≤–∞—Ç—å –±–∞–Ω–∫–∏—Ä–∞', //–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏ 
                value: 'newTicket_–ë–∞–Ω–∫', //—á–∏—Ç–∞–π—Ç–µ (//) –≤ label 
                },
            ]);

            const row = new MessageActionRow().addComponents(selectMenu);

            return int.reply({ content: '–ö–∞–∫–æ–≤–∞  –ø—Ä–∏—á–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞?', components: [row], ephemeral: true });
        }

        case 'newTicket': {
          const roleMappings = {
            'newTicket_–°—É–¥': '924624970028548096', //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
            'newTicket_–ì–≤–∞—Ä–¥–∏—è': '1091083013946867787', //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
            'newTicket_–ü–æ–º–æ—â—å': '996736764561604658', //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
            'newTicket_–ë–∞–Ω–∫': '1081290577066340484', //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
          };
          
          module.exports = async (client, int) => {
        
          };
          
      
            const reason = int.values[0].split('_')[1];
      
            const channel = int.guild.channels.cache.find((x) => x.name === `ticket-${int.member.id}`);
      
            if (!channel) {
              await int.guild.channels.create(`ticket-${int.member.id}`, {
                type: 'GUILD_TEXT',
                topic: `Ticket created by ${int.member.user.username}${
                  reason ? ` (${reason})` : ''
                } ${new Date(Date.now()).toLocaleString()}`,
                permissionOverwrites: [
                  {
                    id: int.guild.id,
                    deny: ['VIEW_CHANNEL'],
                  },
                  {
                    id: int.member.id,
                    allow: ['VIEW_CHANNEL'],
                  },
                  {
                    id: roleMappings[int.values[0]],
                    allow: ['VIEW_CHANNEL'],
                  },
                ],
              });

                const channel = int.guild.channels.cache.find(x => x.name === `ticket-${int.member.id}`);

                const ticketEmbed = new MessageEmbed();

                ticketEmbed.setColor('GREEN');
                ticketEmbed.setAuthor(`–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ${int.member.user.username}${reason ? ` (${reason})` : ''} ‚úÖ`);
                ticketEmbed.setDescription('*–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –Ω–∏–∂–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—è, —á—Ç–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!');

                const closeButton = new MessageButton();

                closeButton.setStyle('DANGER');
                closeButton.setLabel('–ó–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç');
                closeButton.setCustomId(`closeTicket_${int.member.id}`);

                const row = new MessageActionRow().addComponents(closeButton);

                await channel.send({ embeds: [ticketEmbed], components: [row] });

                return int.update({ content: `–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –æ—Ç–∫—Ä—ã—Ç <@${int.member.id}> <#${channel.id}> ‚úÖ`, components: [], ephemeral: true });
            } else {
                return int.update({ content: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç <#${channel.id}> ‚ùå`, components: [], ephemeral: true });
            }
        }

        case 'closeTicket': {
          const channel = int.guild.channels.cache.get(int.channelId);
         
          await channel.edit({
            permissionOverwrites: [
              {
                id: int.guild.id,
                deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
              {
                id: int.member.id,
                allow: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
              {
                id: client.user,
                allow: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
              {
                id: '924624970028548096', //—Å—É–¥ //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
              {
                id: '996736764561604658', //–ø–æ–º–æ—â—å //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
              {
                id: '1081290577066340484', //–±–∞–Ω–∫ //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
              {
                id: '1091083013946867787', //–≥–≤–∞—Ä–¥–∏—è //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
              {
                id: '996736764561604658', //–º–æ–¥–µ—Ä //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
              {
                id: '924747471643639878', //–∞–¥–º–∏–Ω //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
              },
            ],
          });

            const ticketEmbed = new MessageEmbed();

            ticketEmbed.setColor('RED');
            ticketEmbed.setAuthor(`${int.member.user.username} —Ä–µ—à–∏–ª –∑–∞–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç ‚ùå`);
            ticketEmbed.setDescription('*–î–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –∏–ª–∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫–∏—Ü—é –Ω–∏–∂–µ.*');

            const reopenButton = new MessageButton();

            reopenButton.setStyle('SUCCESS');
            reopenButton.setLabel('–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç');
            reopenButton.setCustomId(`reopenTicket_${int.customId.split('_')[1]}`);

            const saveButton = new MessageButton();

            saveButton.setStyle('SUCCESS');
            saveButton.setLabel('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç');
            saveButton.setCustomId(`saveTicket_${int.customId.split('_')[1]}`);

            const deleteButton = new MessageButton();

            deleteButton.setStyle('DANGER');
            deleteButton.setLabel('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç');
            deleteButton.setCustomId('deleteTicket');

            const row = new MessageActionRow().addComponents(reopenButton, saveButton, deleteButton);

            return int.reply({ embeds: [ticketEmbed], components: [row] });
        }

        case 'reopenTicket': {
            const channel = int.guild.channels.cache.get(int.channelId);

            await channel.edit({
              permissionOverwrites: [
                {
                  id: int.guild.id,
                  deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                {
                  id: int.member.id,
                  allow: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                {
                  id: client.user,
                  allow: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                {
                  id: '924624970028548096', //—Å—É–¥ //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                  deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                {
                  id: '996736764561604658', //–ø–æ–º–æ—â—å //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                  deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                {
                  id: '1081290577066340484', //–±–∞–Ω–∫ //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                  deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                {
                  id: '1091083013946867787', //–≥–≤–∞—Ä–¥–∏—è //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                  deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                {
                  id: '996736764561604658', //–º–æ–¥–µ—Ä //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏ 
                  deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                {
                  id: '924747471643639878', //–∞–¥–º–∏–Ω //–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–æ–ª–∏
                  deny: ['VIEW_CHANNEL', 'SEND_MESSAGES'],
                },
                ]
            });

            const ticketEmbed = new MessageEmbed();

            ticketEmbed.setColor('GREEN');
            ticketEmbed.setAuthor(`"'–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –∑–∞–Ω–æ–≤–æ'" ‚úÖ`);
            ticketEmbed.setDescription('*–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –Ω–∏–∂–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—è, —á—Ç–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!');

            const closeButton = new MessageButton();

            closeButton.setStyle('DANGER');
            closeButton.setLabel('Close this ticket');
            closeButton.setCustomId(`closeTicket_${int.customId.split('_')[1]}`);

            const row = new MessageActionRow().addComponents(closeButton);

            return int.reply({ embeds: [ticketEmbed], components: [row] });
        }

        case 'deleteTicket': {
            const channel = int.guild.channels.cache.get(int.channelId);

            return channel.delete();
        }

        case 'saveTicket': {
            const channel = int.guild.channels.cache.get(int.channelId);

            await channel.messages.fetch().then(async msg => {
                let messages = msg.filter(msg => msg.author.bot !== true).map(m => {
                    const date = new Date(m.createdTimestamp).toLocaleString();
                    const user = `${m.author.tag}${m.author.id === int.customId.split('_')[1] ? ' (ticket creator)' : ''}`;

                    return `${date} - ${user} : ${m.attachments.size > 0 ? m.attachments.first().proxyURL : m.content}`;
                }).reverse().join('\n');

                if (messages.length < 1) messages = '–í —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π... —Å—Ç—Ä–∞–Ω–Ω–æ';

                const ticketID = Date.now();

                const stream = await createWriteStream(`./data/${ticketID}.txt`);

                stream.once('open', () => {
                    stream.write(`User ticket ${int.customId.split('_')[1]} (channel #${channel.name})\n\n`);
                    stream.write(`${messages}\n\nLogs ${new Date(ticketID).toLocaleString()}`);

                    stream.end();
                });

                stream.on('finish', () => int.reply({ files: [`./data/${ticketID}.txt`] }));
            });
        }
    }

 client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand() || interaction.commandName !== 'tickets') {
      return;
    }
  
    const member = interaction.member;
  
    if (member.roles.cache.has('996736764561604658') || member.roles.cache.has('924747471643639878')) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –æ–¥–Ω—É –∏–∑ –Ω—É–∂–Ω—ã—Ö —Ä–æ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
        const openTickets = await Ticket.findAll({ where: { resolved: false } });
      
        if (openTickets.length === 0) {
          return int.reply({ content: '–û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç.', ephemeral: true });
        }
      
        const openTicketEmbeds = openTickets.map((ticket) => {
          // –§–æ—Ä–º–∏—Ä—É–µ–º embed –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
          // ...
        });
      
        return int.reply({ embeds: openTicketEmbeds, ephemeral: true });
      }
      const userTickets = await Ticket.findAll({ where: { userId: member.id } });

      if (userTickets.length === 0) {
        return int.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.', ephemeral: true });
      }
      
      const userTicketEmbeds = userTickets.map((ticket) => {
        // –§–æ—Ä–º–∏—Ä—É–µ–º embed –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        // ...
      });
      
      return int.reply({ embeds: userTicketEmbeds, ephemeral: true });
    });   
}
